{
(* vim: set syntax=ocaml: *)
(* 補助的な変数、関数、型などの定義 *)
open Parser
}

(* 正規表現の略記 *)
let space = [' ' '\t']
let digit = ['0'-'9']
let lower = ['a'-'z']
let upper = ['A'-'Z']
let alpha = lower | upper
let zenkaku1 = ['?'-'?']
let zenkaku = zenkaku1 _

rule token = parse
| "東" | "ひがし"
	{ HOUKOU ("東") }
| "西" | "にし"
	{ HOUKOU ("西") }
| "南" | "みなみ"
	{ HOUKOU ("南") }
| "北" | "きた"
	{ HOUKOU ("北") }
| "北東" | "ほくとう"
	{ HOUKOU ("北東") }
| "北西" | "ほくせい"
	{ HOUKOU ("北西") }
| "南東" | "なんとう"
	{ HOUKOU ("南東") }
| "南西" | "なんせい"
	{ HOUKOU ("南西") }

| "家" | "いえ"
	{ IE }
| "部屋" | "へや"
	{ HEYA }
| "橋" | "はし"
	{ HASHI }
| "お城" | "おしろ"
	{ OSHIRO }
| "へ"
	{ HE }
| "に"
	{ NI }
| "から"
	{ KARA }
| "進む" | "すすむ" | "行く" | "いく"
	{ SUSUMU }
| "入る" | "はいる"
	{ HAIRU }
| "出る" | "でる"
	{ DERU }
| "渡る" | "わたる"
	{ WATARU }
| "を"
	{ WO }
| "で"
	{ DE }
| "鍵" | "かぎ"
	{ ITEM ("鍵") }
| "ドア" | "扉" | "とびら"
	{ ITEM ("扉") }
| "サボテン" | "さぼてん"
	{ ITEM ("サボテン") }
| "宝" | "たから"
	{ ITEM ("宝") }
| "うさぎ" | "兎" | "ウサギ"
	{ ITEM ("うさぎ") }
| "魚" | "さかな" | "サカナ"
	{ ITEM ("魚") }
| "しぼりたての牛乳" | "絞り立ての牛乳" | "絞りたての牛乳" | "しぼり立ての牛乳" | "絞り立てのぎゅうにゅう" | "絞りたてのぎゅうにゅう" | "しぼり立てのぎゅうにゅう" | "しぼりたてのぎゅうにゅう" | "牛乳" | "ぎゅうにゅう"
	{ ITEM ("しぼりたての牛乳") }
| "花" | "はな" 
	{ ITEM ("花") }
| "花瓶" | "かびん" 
	{ ITEM ("花瓶") }
| "牛" | "うし" 
	{ ITEM ("牛") }
| "貝殻" | "貝" | "貝がら" | "かいがら" | "かい" 
	{ ITEM ("貝殻") }
| "木の実" | "このみ" | "きのみ"
	{ ITEM ("木の実") }
| "ゾウ" | "ぞう" | "象"
	{ ITEM ("ゾウ") }
| "釣り道具" | "つり道具" | "釣りどうぐ" | "つりどうぐ"
	{ ITEM ("釣り道具") }
| "バラ" | "ばら" | "薔薇" 
	{ ITEM ("バラ") }
| "取る" | "とる" | "手に入れる" | "手にいれる" | "てに入れる" | "てにいれる"
	{ TADOUSHI ("取る") }
| "置く" | "おく"
	{ TADOUSHI ("置く") }
| "開く" | "ひらく" | "開ける" | "あける" | "押す" | "おす" | "引く" | "ひく" 
	{ TADOUSHI ("開く") }
| "閉じる" | "とじる" | "閉める" | "しめる"
	{ TADOUSHI ("閉じる") }
| "ノックする" | "たたく"
	{ TADOUSHI ("ノックする") }
| "蹴る" | "ける" 
	{ TADOUSHI ("蹴る") }
| "壊す" | "こわす" 
	{ TADOUSHI ("壊す") }
| "触る" | "さわる" 
	{ TADOUSHI ("触る") }
| "撫でる" | "なでる" | "なでなでする" | "ナデナデする" | "撫で撫でする" | "撫でなでする"
	{ TADOUSHI ("撫でる") }
| "食べる" | "たべる" 
	{ TADOUSHI ("食べる") }
| "飲む" | "のむ" 
	{ TADOUSHI ("飲む") }
| "生ける" | "いける" 
	{ TADOUSHI ("生ける") }
| "捕まえる" | "つかまえる" 
	{ TADOUSHI ("捕まえる") }
| "釣る" | "つる" 
	{ TADOUSHI ("釣る") }
| "終了する" | "しゅうりょうする"
	{ TANDOKUDOUSHI ("終了する") }
| eof
	{ EOL }
| _
	{ (* 字句解析できなかった部分をエラーとして例外を起こす *)
	  let input = lexbuf.Lexing.lex_buffer in (* 入力文全体 *)
	  let pos = Lexing.lexeme_start lexbuf in (* マッチした先頭の位置 *)
	  let str = String.sub input pos (String.length input - pos) in
	  raise (Syntax.Error ("「" ^ str ^ "」？")) }
